package org.parceler;

import android.os.Parcel;
import android.os.Parcelable;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/* loaded from: classes.dex */
public final class Parcels {
    private static final ParcelCodeRepository REPOSITORY = new ParcelCodeRepository();
    private static final NullParcelable NULL_PARCELABLE = new NullParcelable();

    public interface ParcelableFactory<T> {
        Parcelable buildParcelable(T t);
    }

    static {
        REPOSITORY.loadRepository(NonParcelRepository.getInstance());
    }

    public static <T> Parcelable wrap(T input) {
        return input == null ? NULL_PARCELABLE : wrap(input.getClass(), input);
    }

    public static <T> Parcelable wrap(Class<? extends T> inputType, T input) throws ClassNotFoundException {
        if (input == null) {
            return NULL_PARCELABLE;
        }
        ParcelableFactory parcelableFactory = REPOSITORY.get(inputType);
        return parcelableFactory.buildParcelable(input);
    }

    public static <T> T unwrap(Parcelable input) {
        if (input == null) {
            return null;
        }
        ParcelWrapper<T> wrapper = (ParcelWrapper) input;
        return wrapper.getParcel();
    }

    public static class NullParcelable implements Parcelable, ParcelWrapper<Object> {
        public static final NullParcelableCreator CREATOR = new NullParcelableCreator();

        private NullParcelable(Parcel parcel) {
        }

        private NullParcelable() {
        }

        @Override // android.os.Parcelable
        public void writeToParcel(Parcel parcel, int flags) {
        }

        @Override // android.os.Parcelable
        public int describeContents() {
            return 0;
        }

        @Override // org.parceler.ParcelWrapper
        public Object getParcel() {
            return null;
        }

        private static final class NullParcelableCreator implements Parcelable.Creator<NullParcelable> {
            private NullParcelableCreator() {
            }

            @Override // android.os.Parcelable.Creator
            public NullParcelable createFromParcel(Parcel parcel) {
                return new NullParcelable(parcel);
            }

            @Override // android.os.Parcelable.Creator
            public NullParcelable[] newArray(int size) {
                return new NullParcelable[size];
            }
        }
    }

    private static final class ParcelableFactoryReflectionProxy<T> implements ParcelableFactory<T> {
        private final Constructor<? extends Parcelable> constructor;

        /* JADX WARN: Multi-variable type inference failed */
        public ParcelableFactoryReflectionProxy(Class<T> parcelClass, Class<? extends Parcelable> cls) {
            try {
                this.constructor = cls.getConstructor(parcelClass);
            } catch (NoSuchMethodException e) {
                throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", e);
            }
        }

        @Override // org.parceler.Parcels.ParcelableFactory
        public Parcelable buildParcelable(T input) {
            try {
                return this.constructor.newInstance(input);
            } catch (IllegalAccessException e) {
                throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", e);
            } catch (InstantiationException e2) {
                throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", e2);
            } catch (InvocationTargetException e3) {
                throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", e3);
            }
        }
    }

    private static final class ParcelCodeRepository {
        private ConcurrentMap<Class, ParcelableFactory> generatedMap = new ConcurrentHashMap();

        public ParcelCodeRepository() throws ClassNotFoundException {
            loadRepository(getClass().getClassLoader());
        }

        public ParcelableFactory get(Class clazz) throws ClassNotFoundException {
            ParcelableFactory result = this.generatedMap.get(clazz);
            if (result == null) {
                ParcelableFactory value = findClass(clazz);
                if (value == null) {
                    throw new ParcelerRuntimeException("Unable to find generated Parcelable class for " + clazz.getName() + ", verify that your class is configured properly and that the Parcelable class " + buildParcelableImplName(clazz) + " is generated by Parceler.");
                }
                ParcelableFactory result2 = this.generatedMap.putIfAbsent(clazz, value);
                if (result2 == null) {
                    return value;
                }
                return result2;
            }
            return result;
        }

        private static String buildParcelableImplName(Class clazz) {
            return clazz.getName() + "$$Parcelable";
        }

        public ParcelableFactory findClass(Class clazz) throws ClassNotFoundException {
            try {
                Class parcelWrapperClass = Class.forName(buildParcelableImplName(clazz));
                return new ParcelableFactoryReflectionProxy(clazz, parcelWrapperClass);
            } catch (ClassNotFoundException e) {
                return null;
            }
        }

        public void loadRepository(ClassLoader classLoader) throws ClassNotFoundException {
            try {
                Class repositoryClass = classLoader.loadClass("org.parceler.Parceler$$Parcels");
                loadRepository((Repository<ParcelableFactory>) repositoryClass.newInstance());
            } catch (ClassNotFoundException e) {
            } catch (IllegalAccessException e2) {
                throw new ParcelerRuntimeException("Unable to access generated Repository", e2);
            } catch (InstantiationException e3) {
                throw new ParcelerRuntimeException("Unable to instantiate generated Repository", e3);
            }
        }

        public void loadRepository(Repository<ParcelableFactory> repository) {
            this.generatedMap.putAll(repository.get());
        }
    }
}
